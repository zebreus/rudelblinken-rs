package rudel:base@0.0.1;

/// base is the interface for all basic functionality of the rudelblinken system
@since(version = 0.0.1)
interface base {
    /// Get the version of the rudel base
    ///
    /// If your module requests newer versions of the modules than the host implements, it will attempt to link its old ones anyways and make them conforme to the requested signatures. You can use this function to get the actual version of the host functions.
    ///
    /// If your module requests older versions of the host modules, the host will link compatible functions if available, or abort during linking.
    ///
    /// The host will mock out all functions it can not link.
    @since(version = 0.0.1)
    get-base-version: func() -> semantic-version;

    /// You need to yield periodically, as the watchdog will kill you if you dont
    ///
    /// Will try to sleep for the given duration while still serving callbacks
    ///
    /// Use micros = 0 to sleep for the minimum duration
    ///
    /// Returns the new fuel amount
    @since(version = 0.0.1)
    yield-now: func(micros: u64) -> u32;

    /// Get the remaining fuel
    get-remaining-fuel: func() -> u32;

    /// Sleep for a given amount of time without yielding
    @since(version = 0.0.1)
    sleep: func(micros: u64);

    /// Returns the number of microseconds that have passed since boot
    @since(version = 0.0.1)
    time: func() -> u64;

    /// The semantic version of a module
    record semantic-version {
        major: u8,
        minor: u8,
        patch: u8,
    }

    /// Level of a log entry
    @since(version = 0.0.1)
    enum log-level {
        error,
        warning,
        info,
        debug,
        trace,
    }

    /// Log a message
    @since(version = 0.0.1)
    log: func(level: log-level, message: string);

    /// The name of this host. It is guaranteed to be unique, and will not change during the lifetime of the host.
    ///
    /// The name is returned as a list of 16 bytes to avoid the need for allocations on the host side, as the buffer will be allocated by the guest. The name is UTF-8 encoded, and the buffer will be zero padded after the end of the string.
    ///
    /// Once fixed size lists gets stabilized in WIT, this will be changed to a list<u8, 16>. That should not affect the ABI as the representation of a tuple and a fixed size list is the same.
    ///
    /// Your host bindings should provide a wrapper for this that converts the list to a string.
    @since(version = 0.0.1)
    get-name: func() -> tuple<u8,u8,u8,u8,u8,u8,u8,u8,u8,u8,u8,u8,u8,u8,u8,u8>;


    /// Returns the configuration for this guest, as configured over BLE. The
    /// semantics of the configuration depend on the guest.
    @since(version = 0.0.1)
    get-config: func() -> list<u8>;
}

@since(version = 0.0.1)
interface run {
  /// Run the program.
  @since(version = 0.0.1)
  run: func();
}

world rudel {
    import base;
    import hardware;
    import ble;
    export ble-guest;
    export run;
}

world rudel-host {
    export base;
    export hardware;
    export ble;
    import ble-guest;
    import run;
}

/// Use this interface to control the hardware
@since(version = 0.0.1)
interface hardware {
    @since(version = 0.0.1)
    use base.{semantic-version};

    /// Get the version of the hardware interface provided by the runtime.
    ///
    /// The rudelblinken runtime will mock out all functions the it can not link. If this function returns a version that is lower than the version you requested, you should probably not use any of the functions that are not available in that version.
    @since(version = 0.0.1)
    get-hardware-version: func() -> semantic-version;

    /// Lowlevel function to set the intensities of multiple LEDs
    ///
    /// The values are in lux in the main direction of the LED
    ///
    /// You should probably not use this function directly, but use a higher level abstraction instead
    ///
    /// The first-id is the index of the first LED to set. If the lux list is shorter than the number of LEDs, the remaining LEDs will not be modified. If the lux list is longer than the number of LEDs, the remaining values will be ignored.
    @since(version = 0.0.1)
    set-leds: func(first-id: u16, lux: list<u16>) -> u32;

    /// Convenience function to set all LEDs
    @since(version = 0.0.1)
    set-rgb: func(color: led-color, lux: u32) -> u32;

    /// Get information about the number of LEDs
    @since(version = 0.0.1)
    led-count: func() -> u32;

    record led-color {
        red: u8,
        green: u8,
        blue: u8,
    }
    record led-info {
        color: led-color,
        max-lux: u16,
    }

    /// Get information about a specific LED
    ///
    /// If the id does not exist, the function will return a led-info with all values set to 0
    @since(version = 0.0.1)
    get-led-info: func(id: u16) -> led-info;

    /// Information about the ambient light sensor.
    ///
    /// This could be extended in the future to indicate more types of sensors in future hardware revisions.
    @since(version = 0.0.1)
    enum ambient-light-type {
        none,
        basic,
    }

    /// Information about the ambient light sensor.
    ///
    /// This could be extended in the future to indicate more types of sensors in future hardware revisions.
    @since(version = 0.0.1)
    get-ambient-light-type: func() -> ambient-light-type;

    /// Get the current ambient light level
    ///
    /// The value is in lux
    @since(version = 0.0.1)
    get-ambient-light: func() -> u32;

    /// Information about the vibration sensor.
    ///
    /// This could be extended in the future to indicate more types of sensors in future hardware revisions.
    @since(version = 0.0.1)
    enum vibration-sensor-type {
        none,
        ball,
    }

    /// Vibration sensor type.
    ///
    ///
    @since(version = 0.0.1)
    get-vibration-sensor-type: func() -> vibration-sensor-type;

    /// Get a measure of the vibration level
    ///
    /// TODO: Figure out what this should return
    @since(version = 0.0.1)
    get-vibration: func() -> u32;

    /// Information about the supply voltage sensor.
    ///
    /// This could be extended in the future to indicate more types of sensors in future hardware revisions.
    @since(version = 0.0.1)
    enum voltage-sensor-type {
        none,
        basic,
    }

    /// Voltage sensor type.
    ///
    ///
    @since(version = 0.0.1)
    get-voltage-sensor-type: func() -> vibration-sensor-type;

    /// Get the current supply voltage
    /// 
    /// The value is in millivolts
    @since(version = 0.0.1)
    get-voltage: func() -> u32;
}

/// Control ble stuff
@since(version = 0.0.1)
interface ble {
    @since(version = 0.0.1)
    use base.{semantic-version};

    /// Get the version of the hardware interface provided by the runtime.
    ///
    /// The rudelblinken runtime will mock out all functions the it can not link. If this function returns a version that is lower than the version you requested, you should probably not use any of the functions that are not available in that version.
    @since(version = 0.0.1)
    get-ble-version: func() -> semantic-version;

    /// Configure the BLE advertisements
    @since(version = 0.0.1)
    record advertisement-settings {
        min-interval: u16,
        max-interval: u16,
    }
    /// The data to be sent in the advertisement
    ///
    /// Up to 32 bytes of data
    @since(version = 0.0.1)
    type advertisement-data = list<u8>;

    @since(version = 0.0.1)
    configure-advertisement: func(settings: advertisement-settings) -> u32;
    @since(version = 0.0.1)
    set-advertisement-data: func(data: advertisement-data) -> u32;
}


@since(version = 0.0.1)
interface ble-guest {
    // A ble event
    // For now only advertisments
    variant ble-event {
        advertisement(advertisement),
    }

    // A service UUID, can be a shortened one
    variant service-uuid {
        uuid16(u16),
        uuid32(u32),
        uuid128(tuple<u64,u64>),
    }

    // Service specific data
    record service-data {
        uuid: service-uuid,
        data: list<u8>,
    }

    // Manufacturer specific data
    record manufacturer-data {
        company-id: u16,
        data: list<u8>,
    }

    // TODO: Check order
    flags advertisment-flags {
        // LE Limited Discoverable Mode
        limited-discoverable,
        // LE General Discoverable Mode
        general-discoverable,
        // BR/EDR Not Supported
        br-edr-not-supported,
        // Simultaneous LE and BR/EDR to Same Device Capable (Controller)
        simultaneous-controller,
        // Simultaneous LE and BR/EDR to Same Device Capable (Host)
        simultaneous-host,
        // le-only-limited-discoverable,
        // le-only-general-discoverable,
    }

    enum advertisment-type {
        // indirect advertising
        indirect,
        // direct advertising
        direct-ind,
        // indirect scan response
        indirect-scan,
        // indirect advertising - not connectable
        indirect-not-connectable,
        // scan responst
        scan-response
    }

    // Decoded BLE advertisment
    @since(version = 0.0.1)
    record decoded-data {
        // name of the remote device
        name: option<string>,
        // flags
        advertisment-flags: advertisment-flags,
        // tx power
        tx-power: option<u8>,
        // service UUIDs
        uuids: list<service-uuid>,
        // service data
        service-data: list<service-data>,
        // appearance
        appearance: option<u16>,
        // manufacturer specific data
        manufacturer-data: option<manufacturer-data>,
    }

    @since(version = 0.0.1)
    variant advertisement-data {
        // Decoded advertisment data
        decoded(decoded-data),
        // Raw advertisment data. Returned if there were some fields that failed decoding
        raw(list<u8>)
    }

    // Decoded BLE advertisment
    @since(version = 0.0.1)
    record advertisement {
        // When the advertisement was received
        // There may be some delay between when the advertisement was received and when the WASM guest is notified
        received-at: u64,
        // The address of the sender 48bit integer
        address: u64,
        // Received signal strength
        rssi: s8,
        // Received advertisment type
        advertisment-type: advertisment-type,

        // Received data
        // Will be decoded if it can be decoded
        data: advertisement-data,
    }

    /// Check if the ble module is implemented
    ///
    /// The rudelblinken runtime will mock out all functions the it can not link.
    /// If this function returns false you should not use any of the other functions
    @since(version = 0.0.1)
    on-event: func(event: ble-event);
}
